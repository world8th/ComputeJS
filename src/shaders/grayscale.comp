#version 320 es

layout (local_size_x = 256, local_size_y = 8, local_size_z = 1) in;

layout (std430, set = 0, binding = 0) buffer ImageData {
    uvec4 data[];
} pixel;

// anyways, rgba8unorm == "*Unorm4x8" == AssemblyScript version of unpacking...

void main(){
    // default version
    //vec4 rgba = unpackUnorm4x8(pixel.data[gl_GlobalInvocationID.x]);
    //float gray = dot(rgba.xyz,vec3(1.f/3.f)); rgba.xyz = vec3(gray);
    //pixel.data[gl_GlobalInvocationID.x] = packUnorm4x8(rgba);

    // optimized? version
    uint pix = gl_GlobalInvocationID.x;
    mat4x4 rgba4 = transpose(mat4x4(
        unpackUnorm4x8(pixel.data[pix].x), // 4xR (after transpose)
        unpackUnorm4x8(pixel.data[pix].y), // 4xG (after transpose)
        unpackUnorm4x8(pixel.data[pix].z), // 4xB (after transpose)
        unpackUnorm4x8(pixel.data[pix].w)  // 4xA (after transpose)
    ));

    // make grayscale
    const float e1d3 = 0.33333f;
    vec4 gray = vec4(rgba4[0]*e1d3+rgba4[1]*e1d3+rgba4[2]*e1d3);
    rgba4[0] = rgba4[1] = rgba4[2] = gray;
    
    // finally store to pixel 
    rgba4 = transpose(rgba4);
    pixel.data[pix] = uvec4(packUnorm4x8(rgba4[0]),packUnorm4x8(rgba4[1]),packUnorm4x8(rgba4[2]),packUnorm4x8(rgba4[3]));
}

// WebGPU version of same program with AssemblyScript (threaded WASM still can't be for GPU)
// So I used GLSL for OpenGL ES 3.2
