!function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=4)}({4:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),(async()=>{let e=document.querySelector("#canvas"),t=e.getContext("2d"),r=new Image,a=new Promise((e,t)=>{r.onload=e,r.onerror=t});r.src="assets/images/test.png",await a;const n=await navigator.gpu.requestAdapter(),o=await n.requestDevice();console.log("Creating Pipeline");const i=o.createBindGroupLayout({bindings:[{binding:0,visibility:GPUShaderStage.COMPUTE,type:"storage-buffer"}]}),u=o.createComputePipeline({layout:o.createPipelineLayout({bindGroupLayouts:[i]}),computeStage:{entryPoint:"main",module:o.createShaderModule({code:new Uint32Array(await(await fetch("./build/shaders/grayscale.comp.spv")).arrayBuffer())})}});console.log("Compute Ready");const s=Math.min(e.width*e.height*4,1073741824),f=o.createBuffer({size:s,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),c=o.createBindGroup({layout:i,bindings:[{binding:0,resource:{buffer:f}}]}),l=o.createBuffer({size:s,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.MAP_WRITE}),d=o.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),g=l.mapWriteAsync();t.drawImage(r,0,0);const p=t.getImageData(0,0,e.width,e.height).data;new Uint8Array(await g).set(p),l.unmap();const m=o.createCommandEncoder();m.copyBufferToBuffer(l,0,f,0,s);const y=m.beginComputePass();y.setPipeline(u),y.setBindGroup(0,c),y.dispatch(s>>2>>7,1,1),y.endPass(),m.copyBufferToBuffer(f,0,d,0,s),console.log("Command Submission"),o.defaultQueue.submit([m.finish()]),console.log("Copying from GPU"),t.putImageData(new ImageData(new Uint8ClampedArray(await d.mapReadAsync(),0,s),e.width,e.height),0,0),console.log("Sot ImageData"),d.unmap()})()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,