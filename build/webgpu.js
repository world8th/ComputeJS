!function(e){var t={};function r(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(i,s,function(t){return e[t]}.bind(null,s));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),s=document.getElementById("gfx");s.width=s.height=640,new i.default(s).start()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=new Float32Array([1,-1,0,-1,-1,0,0,1,0]),s=new Float32Array([1,0,0,0,1,0,0,0,1]),a=new Uint16Array([0,1,2]);t.default=class{constructor(e){this.render=()=>{this.colorTexture=this.swapchain.getCurrentTexture(),this.colorTextureView=this.colorTexture.createView(),this.encodeCommands(),requestAnimationFrame(this.render)},this.canvas=e}async start(){await this.initializeAPI()&&(this.resizeBackings(),await this.initializeResources(),this.render())}async initializeAPI(){try{const e=navigator.gpu;if(!e)return!1;this.adapter=await e.requestAdapter(),this.device=await this.adapter.requestDevice(),this.queue=this.device.defaultQueue}catch(e){return console.error(e),!1}return!0}async initializeResources(){let e=(e,t)=>{let r={size:e.byteLength,usage:t},[i,s]=this.device.createBufferMapped(r);return(e instanceof Uint16Array?new Uint16Array(s):new Float32Array(s)).set(e),i.unmap(),i};this.positionBuffer=e(i,GPUBufferUsage.VERTEX),this.colorBuffer=e(s,GPUBufferUsage.VERTEX),this.indexBuffer=e(a,GPUBufferUsage.INDEX);let t=e=>fetch(new Request(e),{method:"GET",mode:"cors"}).then(e=>e.arrayBuffer().then(e=>new Uint32Array(e)));const r={code:await t("/assets/shaders/triangle.vert.spv")};this.vertModule=this.device.createShaderModule(r);const n={code:await t("/assets/shaders/triangle.frag.spv")};this.fragModule=this.device.createShaderModule(n);const o={indexFormat:"uint16",vertexBuffers:[{attributes:[{shaderLocation:0,offset:0,format:"float3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float3"}],arrayStride:12,stepMode:"vertex"}]},c={layout:this.device.createPipelineLayout({bindGroupLayouts:[]}),vertexStage:{module:this.vertModule,entryPoint:"main"},fragmentStage:{module:this.fragModule,entryPoint:"main"},primitiveTopology:"triangle-list",colorStates:[{format:"bgra8unorm",alphaBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},colorBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},writeMask:GPUColorWrite.ALL}],depthStencilState:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"},vertexState:o,rasterizationState:{frontFace:"cw",cullMode:"none"}};this.pipeline=this.device.createRenderPipeline(c)}resizeBackings(){if(!this.swapchain){const e=this.canvas.getContext("gpupresent"),t={device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC};this.swapchain=e.configureSwapChain(t)}const e={size:{width:this.canvas.width,height:this.canvas.height,depth:1},arrayLayerCount:1,mipLevelCount:1,sampleCount:1,dimension:"2d",format:"depth24plus-stencil8",usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC};this.depthTexture=this.device.createTexture(e),this.depthTextureView=this.depthTexture.createView()}encodeCommands(){const e={colorAttachments:[{attachment:this.colorTextureView,loadValue:{r:0,g:0,b:0,a:1},storeOp:"store"}],depthStencilAttachment:{attachment:this.depthTextureView,depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:"load",stencilStoreOp:"store"}};this.commandEncoder=this.device.createCommandEncoder(),this.passEncoder=this.commandEncoder.beginRenderPass(e),this.passEncoder.setPipeline(this.pipeline),this.passEncoder.setViewport(0,0,this.canvas.width,this.canvas.height,0,1),this.passEncoder.setScissorRect(0,0,this.canvas.width,this.canvas.height),this.passEncoder.setVertexBuffer(0,this.positionBuffer),this.passEncoder.setVertexBuffer(1,this.colorBuffer),this.passEncoder.setIndexBuffer(this.indexBuffer),this.passEncoder.drawIndexed(3,1,0,0,0),this.passEncoder.endPass(),this.queue.submit([this.commandEncoder.finish()])}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,